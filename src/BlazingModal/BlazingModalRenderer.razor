@using System.Collections.ObjectModel
@using Microsoft.AspNetCore.Components.Routing
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@code {
    [CascadingParameter] private IModalService CascadedModalService { get; set; } = null!;

    [Parameter] public bool? HideHeader { get; set; }
    [Parameter] public bool? HideCloseButton { get; set; }
    [Parameter] public bool? DisableBackgroundCancel { get; set; }
    [Parameter] public string? OverlayCustomClass { get; set; }
    [Parameter] public ModalPosition? Position { get; set; }
    [Parameter] public string? PositionCustomClass { get; set; }
    [Parameter] public ModalSize? Size { get; set; }
    [Parameter] public string? SizeCustomClass { get; set; }
    [Parameter] public string? Class { get; set; }
    [Parameter] public ModalAnimationType? AnimationType { get; set; }
    [Parameter] public bool? UseCustomLayout { get; set; }
    [Parameter] public bool? ActivateFocusTrap { get; set; }

    private readonly Collection<ModalReference> modals = [];
    private readonly ModalOptions globalModalOptions = new ModalOptions();
    private bool haveActiveModals;

    internal event Action? OnModalClosed;

    protected override void OnInitialized()
    {
        if (CascadedModalService == null)
        {
            throw new InvalidOperationException($"{GetType()} requires a cascading parameter of type {nameof(IModalService)}.");
        }

        ((ModalService) CascadedModalService).OnModalInstanceAdded += Update;
        ((ModalService) CascadedModalService).OnModalCloseRequested += CloseInstance;
        NavigationManager.LocationChanged += CancelModals;

        globalModalOptions.Class = Class;
        globalModalOptions.DisableBackgroundCancel = DisableBackgroundCancel;
        globalModalOptions.HideCloseButton = HideCloseButton;
        globalModalOptions.HideHeader = HideHeader;
        globalModalOptions.Position = Position;
        globalModalOptions.PositionCustomClass = PositionCustomClass;
        globalModalOptions.Size = Size;
        globalModalOptions.SizeCustomClass = SizeCustomClass;
        globalModalOptions.AnimationType = AnimationType;
        globalModalOptions.OverlayCustomClass = OverlayCustomClass;

        globalModalOptions.UseCustomLayout = UseCustomLayout;
        globalModalOptions.ActivateFocusTrap = ActivateFocusTrap;
    }

    private async Task CloseInstance(ModalReference? modal, ModalResult result)
    {
        if (modal?.ModalInstanceRef is not null)
        {
            // Gracefully close the modal
            await modal.ModalInstanceRef.CloseAsync(result);
            
            if (modals.Count is 0)
            {
                ClearBodyStyles();
            }
            OnModalClosed?.Invoke();
        }
        else
        {
            await DismissInstance(modal, result);
        }
    }

    internal Task DismissInstance(Guid id, ModalResult result)
    {
        ModalReference? reference = GetModalReference(id);
        return DismissInstance(reference, result);
    }

    private async Task DismissInstance(ModalReference? modal, ModalResult result)
    {
        if (modal is not null)
        {
            modal.Dismiss(result);
            modals.Remove(modal);
            
            if (modals.Count is 0)
            {
                ClearBodyStyles();
            }
            
            await InvokeAsync(StateHasChanged);
            OnModalClosed?.Invoke();
        }
    }

    private void CancelModals(object? sender, LocationChangedEventArgs e)
    {
        foreach (ModalReference modalReference in modals.ToList())
        {
            modalReference.Dismiss(ModalResult.Cancel());
        }

        modals.Clear();
        ClearBodyStyles();
        InvokeAsync(StateHasChanged);
    }

    private async Task Update(ModalReference modalReference)
    {
        modals.Add(modalReference);

        if (!haveActiveModals)
        {
            haveActiveModals = true;
           
        }

        await InvokeAsync(StateHasChanged);
    }

    private ModalReference? GetModalReference(Guid id)
        => modals.SingleOrDefault(x => x.Id == id);

    private void ClearBodyStyles()
    {
        haveActiveModals = false;
    }
}

<CascadingValue Value="this">
    <CascadingValue Value="globalModalOptions">
        @foreach (ModalReference modal in modals)
        {
            @modal.ModalInstance
        }
    </CascadingValue>
</CascadingValue>
